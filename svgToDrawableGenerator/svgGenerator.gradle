import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import java.lang.Override

class InkscapeSVGToDrawablesTask extends DefaultTask {
    java.io.File from
    java.io.File to

    def targets = [
             ["drawable-ldpi", 0.75],
             ["drawable-mdpi", 1.0],
             ["drawable-hdpi", 1.5],
             ["drawable-xhdpi", 2.0],
             ["drawable-xxhdpi", 3.0],
             ["drawable-xxxhdpi", 4.0]
    ]


    @TaskAction
    def generate() {
        targets.each {
            "mkdir -p ${new java.io.File(to, it[0])}".execute()
        }
        from?.eachFile {
            def filename = it.name.substring(0, it.name.lastIndexOf('.')) + ".png"
            def regex = (it.name =~ /[0-9]+_[0-9]+/)
            if (regex.count > 0) {
                regex = (regex[0] =~ /[0-9]+/)
                generate(it, filename, regex[0].toInteger(), regex[1].toInteger())
            } else {
                regex = (it.name =~ /[0-9]+/)
                generate(it, filename, regex[0].toInteger(), regex[0].toInteger())
            }
            println "Generated ${filename}"
        }
    }

    def generate(from, filename, int width, int height) {
        targets.each {
            def path = new java.io.File(to, it[0])
            def target = new java.io.File(path, filename)
            def newWidth = (width * it[1]).toInteger()
            def newHeight = (height * it[1]).toInteger()
            "inkscape -z -e $target -w $newWidth -h $newHeight $from".execute([], project.rootDir).text.trim()
        }
    }

    @Override
    Task doLast(Action<? super Task> action) {
        return super.doLast(action)
    }
}

task generateIcons(type: InkscapeSVGToDrawablesTask) {
    description = 'Generates icons from svg'
    group = "Generators"
}
