buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.squareup:kotlinpoet:0.6.0"
    }
}

import com.squareup.kotlinpoet.*

class KotlinBundleAndIntentExtensionsGenerator extends DefaultTask {
    String packageName = "app.generated"
    String fileName = "BundleIntentHelper"
    def list

    @Override
    Task doLast(Action<? super Task> action) {
        return super.doLast(action)
    }

    @TaskAction
    def generateStuff() {
        def intent = new ClassName("android.content", "Intent")
        def bundle = new ClassName("android.os", "Bundle")
        def bool = new ClassName("kotlin", "Boolean")

        def javaFile = FileSpec.builder(packageName, fileName)
        list.each { array ->
            def type = new ClassName(array[0].trim(), array[1].trim()).asNullable()

            // intent put
            javaFile.addFunction(FunSpec.builder(putName(type, array[3].trim()))
                    .receiver(intent)
                    .returns(intent)
                    .addParameter(ParameterSpec.builder("parameter", type).build())
                    .addCode("return putExtra(\"${array[2].trim()}\", parameter)")
                    .build())
            // intent get
            javaFile.addFunction(FunSpec.builder("get${array[3].trim()}")
                    .receiver(intent)
                    .returns(type)
                    .addCode(intentGet(type, array[2].trim()))
                    .build())
            // intent has
            javaFile.addFunction(FunSpec.builder("has${array[3].trim()}")
                    .receiver(intent)
                    .returns(bool)
                    .addCode("return hasExtra(\"${array[2].trim()}\")")
                    .build())
            // intent remove
            javaFile.addFunction(FunSpec.builder("remove${array[3].trim()}")
                    .receiver(intent)
                    .addCode("return removeExtra(\"${array[2].trim()}\")")
                    .build())
            // bundle put
            javaFile.addFunction(FunSpec.builder(putName(type, array[3].trim()))
                    .receiver(bundle)
                    .returns(bundle)
                    .addParameter(ParameterSpec.builder("parameter", type).build())
                    .addCode(bundlePut(type, array[2].trim()))
                    .build())
            // bundle get
            javaFile.addFunction(FunSpec.builder("get${array[3].trim()}")
                    .receiver(bundle)
                    .returns(type)
                    .addCode(bundleGet(type, array[2].trim()))
                    .build())
            // bundle has
            javaFile.addFunction(FunSpec.builder("has${array[3].trim()}")
                    .receiver(bundle)
                    .returns(bool)
                    .addCode("return containsKey(\"${array[2].trim()}\")")
                    .build())
            // bundle remove
            javaFile.addFunction(FunSpec.builder("remove${array[3].trim()}")
                    .receiver(bundle)
                    .addCode("return remove(\"${array[2].trim()}\")\n")
                    .build())
        }
        javaFile.build().writeTo(new File("${project.projectDir.path}/src/main/java/"))
    }


    static def bundlePut(className, name) {
        switch (className.simpleName()) {
            case "Boolean":
            case "Int":
            case "Long":
            case "Float":
            case "Double":
            case "String":
            case "Byte":
            case "Char":
            case "Short":
                return "return this.apply { put${className.simpleName()}(\"${name}\", parameter!!) }"
            default:
                return "return this.apply { putParcelable(\"${name}\", parameter) }"
        }
    }

    static def intentGet(className, name) {
        switch (className.simpleName()) {
            case "Boolean":
                return "return get${className.simpleName()}Extra(\"${name}\", 0)"
            case "Int":
                return "return get${className.simpleName()}Extra(\"${name}\", 0)"
            case "Long":
                return "return get${className.simpleName()}Extra(\"${name}\", 0)"
            case "Float":
                return "return get${className.simpleName()}Extra(\"${name}\". 0.0.toFloat()"
            case "Double":
                return "return get${className.simpleName()}Extra(\"${name}\", 0.0)"
            case "String":
                return "return get${className.simpleName()}Extra(\"${name}\")"
            case "Byte":
                return "return get${className.simpleName()}Extra(\"${name}\", 0.toByte())"
            case "Char":
                return "return get${className.simpleName()}Extra(\"${name}\", 0.toChar())"
            case "Short":
                return "return get${className.simpleName()}Extra(\"${name}\", 0.toShort())"
            default:
                return "return getParcelableExtra(\"${name}\")"
        }
    }

    static def bundleGet(className, name) {
        switch (className.simpleName()) {
            case "Boolean":
            case "Int":
            case "Long":
            case "Float":
            case "Double":
            case "String":
            case "Byte":
            case "Char":
            case "Short":
                return "return get${className.simpleName()}(\"${name}\")"
            default:
                return "return getParcelable(\"${name}\")"
        }
    }

    static def putName(className, name) {
        switch (className.simpleName()) {
            case "Boolean":
            case "Int":
            case "Long":
            case "Float":
            case "Double":
            case "String":
            case "Byte":
            case "Char":
            case "Short":
                return "put${name}"
            default:
                return "put"
        }
    }
}


task generateBundleAndIntentExtensions(type: KotlinBundleAndIntentExtensionsGenerator) {
    description = 'Generates kotlin extensions for defined'
    group = "Kotlin generators"
    list = []
}

